{"name":"Appconfig","tagline":"Python module to simplify the usage of config files.","body":"# appconfig\r\n\r\n`appconfig` is a python module that simplifies the usage of ini based config\r\nfiles. It uses the Python ConfigParser module. The advantage of the appconfig\r\nmodule it that it allows defining default values for all config parameters and\r\nto provide a description of each parameter. While writing the config file back\r\nit will add comments above all of the config values and since we have default\r\nvalues we never need to check if a value is defined.\r\n\r\n## Features\r\n\r\nThe `appconfig` module offers the following features:\r\n\r\n* default values for config values\r\n* config file generation with parameter description\r\n* automatic type conversion and type checks for config values\r\n* config directory handling\r\n\r\n## Installation\r\n\r\n```\r\npip install appconfig\r\n```\r\n\r\n### Dependencies\r\n\r\nThe following packages are required for using the library:\r\n\r\n* [appdirs](https://pypi.python.org/pypi/appdirs)\r\n\r\nTo run the unit test the following packages are required:\r\n\r\n* [nose](https://nose.readthedocs.org/en/latest/)\r\n\r\n## Examples \r\n\r\n### Example Config File\r\n\r\nThe config files that the user will use for your application will have the ini\r\nformat. For the application it self it is necessary to create a config file\r\nwith json content that allows to set the default values and the documentation\r\nfor all keys.\r\n\r\n**Example JSON File**\r\n```\r\n{\r\n    \"application_name\": \"appconfig_test\",\r\n    \"application_author\": \"python\",\r\n    \"application_version\": \"1.0\",\r\n    \"appconfig\": {\r\n        \"first\": {\r\n            \"default\": 1,\r\n            \"description\": \"the first parameter\",\r\n            \"type\": \"int\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis will lead to the following user config file:\r\n\r\n**Example ini config File**\r\n```\r\n[appconfig]\r\n# the first paramter \r\n# Type: [int]\r\n# first = 1\r\nfisrt = 10\r\n```\r\n\r\n## Example Usage\r\n\r\nWith the application and the user config from above a simple python\r\napplication might look like these:\r\n\r\n```\r\n#!/bin/env python\r\n\r\nfrom appconfig import AppConfig\r\n\r\n\r\ndef main():\r\n    \"\"\" The main method to be run.\r\n    \"\"\"\r\n    conf = AppConfig()\r\n    conf.init_default_config('example.json')\r\n    conf.load('example.conf')\r\n\r\n    value = conf.get_s('appconfig', 'first')\r\n    print value\r\n    print type(value)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n## Application Config Format\r\n\r\nThe application config format is a simple config file with json syntax it\r\nrequires at least the application_name to be defined and one json object \r\n(config section) with at least one parameter defined.\r\n\r\n```\r\n{\r\n    \"application_name\": \"appconfig_test\",\r\n    \"application_author\": \"python\",\r\n    \"application_version\": \"1.0\",\r\n    \"appconfig\": {\r\n        \"first\": {\r\n            \"default\": 1,\r\n            \"description\": \"the first parameter\",\r\n            \"type\": \"int\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n* **application_name** Defines the application name for the application using\r\n    this config file. The application name is used to access the global and\r\n    the user local config files. (See Config File Location)\r\n* **application_author** Defines the name of the author of the application.\r\n    This name is used to access the user config file on Windows (See Config \r\n    File Location)\r\n* **application_version** Defines the application version to separate\r\n    different versions of the config file to support multiple versions of the\r\n    same application on one system. (See Config File Location)\r\n* **appconfig** Defines a section named `appconfig` The section name can be\r\n    almost any name. Only the `application_*` keywords and the name hidden\r\n    are prohibited since they are used from the library. It is possible to\r\n    have multiple sections.\r\n\r\nA section consists out of at least one parameter. Each parameter must be a json\r\nobject with the following three parameter defined:\r\n\r\n* **default** This defines the default value that is used if the value is not\r\n    set by the user.\r\n* **description** Describes the parameter\r\n* **type** Defines the type that this parameter gets converted to (see \r\n    Supported Types)\r\n\r\n### Config File Location\r\n\r\nThe load_default function tries to load config files from different locations.\r\nThe first location it tries is the global config directory:\r\n\r\n**Mac OS X**\r\n```\r\n/Library/Application Support/APPNAME/APPNAME.conf\r\n```\r\n\r\n**Linux**\r\n```\r\n/etc/xdg/APPNAME/APPNAME.conf\r\n```\r\n\r\n**Windows 7**\r\n```\r\n?\r\n```\r\n\r\nThe second location is the users home directory where the local config files\r\nare store.\r\n\r\n**Mac OS X**\r\n```\r\n/Users/USERNAME/Library/Application Support/APPNAME/APPNAME.conf\r\n```\r\n\r\n**Linux**\r\n```\r\n/home/USERSNAME/.config/APPNAME/APPNAME.conf\r\n```\r\n\r\n**Windows**\r\n```\r\nC:\\Users\\USERNAME\\AppData\\Local\\AUTHOR\\APPNAME\\APPNAME.conf\r\n```\r\n\r\nIf both file exist they will be loaded in this order and the user config file\r\nwill override values from the global config file.\r\n\r\nIf the application version is specified then the application version will be\r\nadded to the path after the application name. This allows a per-version\r\nisolation of the config files.\r\n\r\nThe `save` saves a config file if no config file is specified it will try to\r\nuse the user default location or the location configured within the section\r\n`APPNAME` config value `config_file`.\r\n\r\n### Suported Types\r\n\r\nCurrently the following types are supported for a config value:\r\n\r\n* `str`\r\n* `unicode`\r\n* `int`\r\n* `float`\r\n* `bool`\r\n\r\nAll the types will be converted with python functions. The only exception is\r\nthe `bool` type. The boolean type uses the RawConfigParser.getboolean function.\r\nThis translates the following string to a true (1, yes, true, on)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}